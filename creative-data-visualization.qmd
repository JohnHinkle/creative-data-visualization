---
title: "Methionine Madness"
subtitle: "Codons as 2025 NCAA Division I Men's Basketball Tournament Teams"
author: "John Hinkle"
format: html
editor: visual
self-contained: true
---

# Introduction

There are 64 possible 3-base combinations of the four nucleotides (A, C, G, T) that make up DNA. These 64 combinations are known as codons. 61 of these 64 codons are responsible for encoding the 20 amino acids which are used to build proteins. The remaining 3 codons encode a "STOP" signal.

64 is also the number of teams that play in the first round of the NCAA Division I Men's Basketball Tournament (let's ignore the First Four in Dayton for the sake of this exercise).

## Load packages and set seed

```{r}
library(tidyverse) # for tidyverse suite of packages
library(readxl) # for reading in data
library(ggplot2) # for plotting
library(cbbplotR) # for team logos
set.seed(64) # for reproducibility
```

## Load and inspect data

There are three data sets.

[TEAMS]{.underline} contains information about the 64 teams that played in the first round of the 2025 NCAA Men's Basketball Tournament.

[CODONS]{.underline} contains all 64 codons and what amino acid (or STOP signal) each encodes for.

[SCORERS]{.underline} contains data about the leading scorer of each first round team.

```{r}
TEAMS <- read_excel("./data/first-round-teams.xlsx")
CODONS <- read_excel("./data/codons.xlsx")
SCORERS <- read_excel("./data/leading-scorers.xlsx")
```

## Shuffle codon data

The codon data set is listed in order of amino acid. I don't want the top seeds in a region encoding for the same amino acid, so I will shuffle the data.

```{r}
CODONS <- CODONS[sample(nrow(CODONS)), ]
```

## Joining data sets

This assigns a codon to each team

```{r}
TEAMS_CODONS <- cbind(TEAMS, CODONS)
TEAMS_CODONS
```

## Codon helper function

**splitter()** is a function that splits a DNA sequence into codons. If the number of nucleotides is not divisible by three, the extra nucleotides will be removed. *This is a helper function for the **team_seq()** function.*

```{r}
splitter <- function(dna_seq) {
  dna_seq <- gsub("\\s+", "", dna_seq)
  dna_seq <- toupper(dna_seq)

  # Check length is divisible by 3 (optional)
  if (nchar(dna_seq) %% 3 != 0) {
    warning("DNA sequence length is not a multiple of 3. Extra nucleotides will be removed!")
  }

  # Split into codons
  codons <- substring(dna_seq,
                      seq(1, nchar(dna_seq) - 2, by = 3), 
                      seq(3, nchar(dna_seq), by = 3))

  return(codons)
}
```

## Visualizing DNA codons as team logos

This function reads in a DNA sequence, splits it into codons (using the splitter() function). It then matches the codons contained in the sequence to teams, and prints out the team logos. The team logos are obtained from the **cbbplotR** package.

```{r}
team_seq <- function(dna_seq) {
  d <- TEAMS_CODONS
  codons <- splitter(dna_seq)
  teams <- d$Team[match(codons, d$Codon)]
  seeds <- d$OverallSeed[match(teams, d$Team)]
  avg_seed <- mean(seeds)
  rounded_seed <- round(avg_seed)
  
  random_team_data <- tibble(
    val1 = seq_along(teams),
    val2 = 1,
    Team = teams
  )
  
  p <- ggplot(data = random_team_data, aes(x = val1, y = val2, team = Team)) +
    geom_cbb_teams(width = 1 / length(teams) * 0.4) +
    labs(title = paste("The sequence contains the following teams, and the average overall seed is", rounded_seed)) +
    theme_void()
  
  return(p)
}
```

## Example

```{r}
team_seq("ATTTAGCGT")
```

## Amino Acids

Codons encode for an amino acid (or a stop signal). There are 20 amino acids plus the stop signal. This section will visualize amino acids as "star players" (as determined by who is a team's leading scorer).

Several codons encode for the same amino acid, so in this exercise the highest seeded team will have their star player be represented as the amino acid. So if the #1, #15, and #42 teams are all associated with codons that encode for the same amino acid, then the amino acid will be visualized as the star player for the #1 team.

## Player ID function

This function obtains the unique player ID assigned to every college basketball player in the ESPN database.

```{r}
get_all_player_ids <- function(team_list) {
  all_players <- data.frame()

  for (team in team_list) {
    players <- get_espn_players(team)
    players_subset <- players[, c("id", "displayName")]
    players_subset$Team <- team

    all_players <- rbind(all_players, players_subset)
  }

  return(all_players)
}
```

## Add leading scorer and their ID to data set

```{r}
player_ids <- get_all_player_ids(TEAMS_CODONS$Team)
TEAMS_CODONS_PLAYERS <- left_join(TEAMS_CODONS, SCORERS, by = "Team") |> 
  left_join(player_ids, by = c("LeadingScorer" = "displayName", "Team" = "Team"))
TEAMS_CODONS_PLAYERS
```

### Fixing a consequence of the transfer portal

Donovan Dent (New Mexico's leading scorer in the 2024-25 season) recently transferred to UCLA. ESPN has already listed him as a UCLA player, so I have to go in and manually add his ID in.

```{r}
# fix the portal
TEAMS_CODONS_PLAYERS$id[42] <- 5107782
```

## Determine which team will have their star player represent an amino acid.

```{r}
# Combine codons by amino acid
grouped <- TEAMS_CODONS_PLAYERS |>
  group_by(AminoAcid) |>
  summarize(AllCodons = list(Codon), .groups = "drop")

# Determine the team whose leading scorer will represent an amino acid
winners <- TEAMS_CODONS_PLAYERS |>
  group_by(AminoAcid) |>
  slice_min(order_by = OverallSeed) |>
  ungroup()

# Create df with required information
result <- winners |>
  left_join(grouped, by = "AminoAcid") |>
  select(Team, LeadingScorer, id, AminoAcid, AllCodons)
```

## Visualizing amino acids as star players

```{r}
player_seq <- function(dna_seq) {
  d <- result
  codons <- splitter(dna_seq)
  matches <- sapply(d$AllCodons, function(row_codons) any(row_codons %in% codons))
  pids <- unlist(lapply(codons, function(codon) {
    matching_rows <- sapply(d$AllCodons, function(row_codons) codon %in% row_codons)
    d$id[matching_rows]
  }))


    random_team_data <- tibble(
    val1 = seq_along(pids),
    val2 = 1,
    PID = pids
  ) 
  p <- ggplot(data = random_team_data, aes(x = val1, y = val2)) +
    geom_cbb_headshots(aes(player_id = PID, width = 1 / length(pids) * 0.4)) +
    labs(title = paste("Title")) +
    theme_void()
  
  return(p)
  
}
  
player_seq("ATTTAGCGT")
```
